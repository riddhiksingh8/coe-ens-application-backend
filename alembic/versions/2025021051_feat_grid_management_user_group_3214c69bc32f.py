"""feat :  grid_management, user_group

Revision ID: 3214c69bc32f
Revises: 2ddd09a2f8e6
Create Date: 2025-02-10 18:51:20.672107

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "3214c69bc32f"
down_revision = "2ddd09a2f8e6"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "grid_management",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.String(length=50), nullable=False),
        sa.Column("ens_id", sa.String(length=50), nullable=True),
        sa.Column("contact_id", sa.String(), nullable=True),
        sa.Column("grid_adverse_media_other_crimes", sa.JSON(), nullable=True),
        sa.Column("grid_adverse_media_reputational_risk", sa.JSON(), nullable=True),
        sa.Column("grid_sanctions", sa.JSON(), nullable=True),
        sa.Column("grid_regulatory", sa.JSON(), nullable=True),
        sa.Column("grid_bribery_fraud_corruption", sa.JSON(), nullable=True),
        sa.Column("grid_pep", sa.JSON(), nullable=True),
        sa.Column("grid_legal", sa.JSON(), nullable=True),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    
    op.add_column("users_table", sa.Column("user_group", sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("ix_users_table_user_id", "users_table", ["user_id"], unique=True)
    op.drop_column("users_table", "user_group")
    op.alter_column(
        "upload_supplier_master_data",
        "process_status",
        existing_type=sa.Enum(
            "NOT_STARTED",
            "STARTED",
            "IN_PROGRESS",
            "COMPLETED",
            "FAILED",
            "PENDING",
            name="status",
        ),
        type_=postgresql.ENUM(
            "VALIDATED",
            "NOT_VALIDATED",
            "NOT_REQUIRED",
            "PENDING",
            name="truesightstatus",
        ),
        existing_nullable=False,
        existing_server_default=sa.text("'PENDING'::truesightstatus"),
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_sown",
        "sown",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_sape",
        "sape",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_rfct",
        "rfct",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_ovar",
        "ovar",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_oval",
        "oval",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_news",
        "news",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_lgrk",
        "lgrk",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_fstb",
        "fstb",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "controlling_shareholders",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "solvency_ratio",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "beneficial_owners_intermediatory",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "roce_before_tax",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "total_assets",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "cash_flow",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "profit_margin",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "roe_before_tax",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "pl_before_tax",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "external_supplier_data",
        sa.Column(
            "shareholders_fund",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.alter_column(
        "external_supplier_data",
        "legal",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "event_adverse_media_reputational_risk",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "event_adverse_media_other_crimes",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "event_pep",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "event_bribery_fraud_corruption",
        existing_type=sa.String(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "cyber_risk_score",
        existing_type=sa.Numeric(precision=4, scale=2),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "esg_governance_rating",
        existing_type=sa.Numeric(precision=3, scale=2),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "esg_social_rating",
        existing_type=sa.Numeric(precision=5, scale=2),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "esg_environmental_rating",
        existing_type=sa.Numeric(precision=3, scale=2),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "esg_overall_rating",
        existing_type=sa.Numeric(precision=3, scale=2),
        type_=sa.INTEGER(),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "roe_using_net_income",
        existing_type=sa.Numeric(precision=10, scale=4),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "current_ratio",
        existing_type=sa.Numeric(precision=10, scale=4),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "ebitda",
        existing_type=sa.Numeric(precision=18, scale=2),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "profit_loss_after_tax",
        existing_type=sa.Numeric(precision=18, scale=2),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "operating_revenue",
        existing_type=sa.Numeric(precision=18, scale=2),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "alias",
        existing_type=sa.Text(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "national_identifier",
        existing_type=sa.String(length=50),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "national_identifier_type",
        existing_type=sa.String(length=50),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "location",
        existing_type=sa.String(length=30),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    op.alter_column(
        "external_supplier_data",
        "country",
        existing_type=sa.String(length=20),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    op.drop_column("external_supplier_data", "ebidta")
    op.drop_column("external_supplier_data", "ultimate_beneficiary_owner")
    op.drop_column("external_supplier_data", "debt_to_equity_ratio")
    op.create_table(
        "news_master",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("category", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("link", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("sentiment", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("content_filtered", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="news_master_pkey"),
    )
    op.create_table(
        "orgdata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "orgname", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "orgidentifier", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("bvdids", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="orgdata_pkey"),
        sa.UniqueConstraint("bvdids", name="orgdata_bvdids_key"),
        sa.UniqueConstraint("orgidentifier", name="orgdata_orgidentifier_key"),
    )
    op.create_table(
        "matchbvdid",
        sa.Column("bvdid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "name_international",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "postcode", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "country", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "phone_or_fax", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "email_or_website",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "national_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("state", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "address_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ens_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("ens_id", name="matchbvdid_pkey"),
    )
    op.drop_table("grid_management")
    # ### end Alembic commands ###
