"""add notification table

Revision ID: 66c2cc303f0c
Revises: 8b4fe7fa8e93
Create Date: 2025-07-15 15:14:57.088378

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "66c2cc303f0c"
down_revision = "8b4fe7fa8e93"
branch_labels = None
depends_on = None

ENUM_NAME = 'status'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"ALTER TYPE {ENUM_NAME} ADD VALUE IF NOT EXISTS 'SKIP'")
    op.create_table(
        "notification",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("ens_id", sa.String(length=50), nullable=True),
        sa.Column(
            "notification_type",
            sa.Enum("UPDATE", "ALERT", name="notificationtype"),
            server_default=sa.text("'UPDATE'"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("theme", sa.String(length=100), nullable=True),
        sa.Column("data_value", sa.String(length=255), nullable=True),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    
    op.add_column(
        "continuous_monitoring",
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "continuous_monitoring",
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ens_continuous_group_mapping",
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ens_continuous_group_mapping",
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ens_schedule_group_mapping",
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ens_schedule_group_mapping",
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "entity_universe", sa.Column("last_screened_date", sa.Date(), nullable=True)
    )
    op.add_column(
        "entity_universe", sa.Column("external_vendor_id", sa.String(), nullable=True)
    )

    
    op.add_column(
        "schedule_monitoring",
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "schedule_monitoring",
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "session_group_mapping",
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "session_group_mapping",
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    
    
    
    # ### end Alembic commands ###


def downgrade():
    pass