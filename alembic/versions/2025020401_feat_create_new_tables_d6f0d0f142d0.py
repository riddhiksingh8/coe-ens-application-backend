"""feat: create new tables

Revision ID: d6f0d0f142d0
Revises: db65ce951064
Create Date: 2025-02-04 16:01:26.259127

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import ENUM
from sqlalchemy.sql import expression
from alembic import op

# revision identifiers, used by Alembic.
revision = "d6f0d0f142d0"
down_revision = "db65ce951064"
branch_labels = None
depends_on = None

status_enum = ENUM('NOT_STARTED', 'STARTED', 'IN_PROGRESS', 'COMPLETED', 'FAILED',name='status')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ensid_screening_status",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.String(length=50), nullable=False),
        sa.Column("ens_id", sa.String(length=50), nullable=True),
        sa.Column(
            "overall_status",
            status_enum,
            server_default=expression.literal('NOT_STARTED'),
            nullable=False,
        ),
        sa.Column(
            "orbis_retrieval_status",
            status_enum,
            server_default=expression.literal('NOT_STARTED'),
            nullable=False,
        ),
        sa.Column(
            "screening_modules_status",
            status_enum,
            server_default=expression.literal('NOT_STARTED'),
            nullable=False,
        ),
        sa.Column(
            "report_generation_status",
            status_enum,
            server_default=expression.literal('NOT_STARTED'),
            nullable=False,
        ),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "session_screening_status",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.String(length=50), nullable=False),
        sa.Column(
            "overall_status",
            sa.Enum(
                "NOTSTARTED",
                "STARTED",
                "INPROGRESS",
                "COMPLETED",
                "FAILED",
                name="status",
            ),
            server_default=sa.text("'NOT_STARTED'"),
            nullable=False,
        ),
        sa.Column(
            "list_upload_status",
            sa.Enum(
                "NOTSTARTED",
                "STARTED",
                "INPROGRESS",
                "COMPLETED",
                "FAILED",
                name="status",
            ),
            server_default=sa.text("'NOT_STARTED'"),
            nullable=False,
        ),
        sa.Column(
            "supplier_name_validation_status",
            sa.Enum(
                "NOTSTARTED",
                "STARTED",
                "INPROGRESS",
                "COMPLETED",
                "FAILED",
                name="status",
            ),
            server_default=sa.text("'NOT_STARTED'"),
            nullable=False,
        ),
        sa.Column(
            "screening_analysis_status",
            sa.Enum(
                "NOTSTARTED",
                "STARTED",
                "INPROGRESS",
                "COMPLETED",
                "FAILED",
                name="status",
            ),
            server_default=sa.text("'NOT_STARTED'"),
            nullable=False,
        ),
        sa.Column(
            "create_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("batch_status")
    op.drop_table("orgdata")
    op.drop_table("matchbvdid")
    op.add_column(
        'upload_supplier_master_data',
        sa.Column('pre_existing_bvdid', sa.Boolean(), nullable=True)  # Allow NULL initially
    )

    op.execute("UPDATE upload_supplier_master_data SET pre_existing_bvdid = FALSE WHERE pre_existing_bvdid IS NULL")

    op.alter_column('upload_supplier_master_data', 'pre_existing_bvdid', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("upload_supplier_master_data", "pre_existing_bvdid")
    op.create_table(
        "matchbvdid",
        sa.Column("bvdid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "name_international",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "postcode", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "country", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "phone_or_fax", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "email_or_website",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "national_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("state", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "address_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ens_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("ens_id", name="matchbvdid_pkey"),
    )
    op.create_table(
        "orgdata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "orgname", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "orgidentifier", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("bvdids", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="orgdata_pkey"),
        sa.UniqueConstraint("bvdids", name="orgdata_bvdids_key"),
        sa.UniqueConstraint("orgidentifier", name="orgdata_orgidentifier_key"),
    )
    op.create_table(
        "batch_status",
        sa.Column("batch_id", sa.CHAR(length=15), autoincrement=False, nullable=False),
        sa.Column("item_id", sa.CHAR(length=15), autoincrement=False, nullable=False),
        sa.Column("status", sa.CHAR(length=15), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("batch_id", "item_id", name="batch_status_pkey"),
    )
    op.drop_table("session_screening_status")
    op.drop_table("ensid_screening_status")
    # ### end Alembic commands ###
