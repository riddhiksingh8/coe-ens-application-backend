"""feat : updation

Revision ID: 43a1cb3658e3
Revises: 32dc87a78a61
Create Date: 2025-02-15 12:53:56.692589

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "43a1cb3658e3"
down_revision = "32dc87a78a61"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Make 'link' NOT NULL (required for primary key)
    op.alter_column('news_master', 'link', nullable=True)
    op.add_column('news_master', 
              sa.Column('link', sa.Text(), primary_key=True, nullable=True))
    op.drop_table("orgdata")
    op.drop_table("matchbvdid")
    op.drop_constraint("unique_ensid_session_kpicode_fstb", "fstb", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ens_contact_session", "grid_management", type_="unique")
    op.drop_constraint("unique_ensid_session_kpicode_lgrk", "lgrk", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ensid_session_kpicode_news", "news", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.alter_column("news_master", "link", existing_type=sa.TEXT(), nullable=True)
    op.drop_constraint("unique_ensid_session_kpicode_oval", "oval", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ensid_session_kpicode_ovar", "ovar", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ensid_session_kpicode_rfct", "rfct", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ensid_session_kpicode_sape", "sape", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.drop_constraint("unique_ensid_session_kpicode_sown", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode", "sown", ["ens_id", "session_id", "kpi_code"]
    )
    op.alter_column(
        "upload_supplier_master_data",
        "process_status",
        existing_type=postgresql.ENUM(
            "VALIDATED",
            "NOT_VALIDATED",
            "NOT_REQUIRED",
            "PENDING",
            name="truesightstatus",
        ),
        type_=sa.Enum(
            "NOT_STARTED",
            "STARTED",
            "IN_PROGRESS",
            "COMPLETED",
            "FAILED",
            "PENDING",
            name="status",
        ),
        existing_nullable=False,
        existing_server_default=sa.text("'PENDING'::truesightstatus"),
    )
    op.alter_column(
        "users_table", "user_group", existing_type=sa.VARCHAR(), nullable=False
    )
    op.drop_index("ix_users_table_user_id", table_name="users_table")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("ix_users_table_user_id", "users_table", ["user_id"], unique=True)
    op.alter_column(
        "users_table", "user_group", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "upload_supplier_master_data",
        "process_status",
        existing_type=sa.Enum(
            "NOT_STARTED",
            "STARTED",
            "IN_PROGRESS",
            "COMPLETED",
            "FAILED",
            "PENDING",
            name="status",
        ),
        type_=postgresql.ENUM(
            "VALIDATED",
            "NOT_VALIDATED",
            "NOT_REQUIRED",
            "PENDING",
            name="truesightstatus",
        ),
        existing_nullable=False,
        existing_server_default=sa.text("'PENDING'::truesightstatus"),
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_sown",
        "sown",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_sape",
        "sape",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_rfct",
        "rfct",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_ovar",
        "ovar",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_oval",
        "oval",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.alter_column("news_master", "link", existing_type=sa.TEXT(), nullable=False)
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_news",
        "news",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_lgrk",
        "lgrk",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.create_unique_constraint(
        "unique_ens_contact_session",
        "grid_management",
        ["ens_id", "contact_id", "session_id"],
    )
    op.drop_constraint("unique_ensid_session_kpicode", "sown", type_="unique")
    op.create_unique_constraint(
        "unique_ensid_session_kpicode_fstb",
        "fstb",
        ["ens_id", "session_id", "kpi_code"],
    )
    op.create_table(
        "matchbvdid",
        sa.Column("bvdid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "name_international",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "postcode", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "country", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "phone_or_fax", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "email_or_website",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "national_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("state", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "address_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ens_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("ens_id", name="matchbvdid_pkey"),
    )
    op.create_table(
        "orgdata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "orgname", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "orgidentifier", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("bvdids", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="orgdata_pkey"),
        sa.UniqueConstraint("bvdids", name="orgdata_bvdids_key"),
        sa.UniqueConstraint("orgidentifier", name="orgdata_orgidentifier_key"),
    )
    # ### end Alembic commands ###
