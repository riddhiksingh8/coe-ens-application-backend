import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from alembic import op

# revision identifiers, used by Alembic.
revision = "b30ed865ac90"
down_revision = "f46b08eb03f7"
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    
    # Check if the unique constraint already exists
    result = conn.execute(sa.text("""
        SELECT constraint_name
        FROM information_schema.table_constraints 
        WHERE table_name = 'external_supplier_data' 
          AND constraint_name = 'unique_ens_session'
    """))
    
    if not result.fetchone():  # Constraint does not exist
        op.create_unique_constraint(
            "unique_ens_session", "external_supplier_data", ["ens_id", "session_id"]
        )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the unique constraint if it exists
    conn = op.get_bind()
    result = conn.execute(sa.text("""
        SELECT constraint_name
        FROM information_schema.table_constraints 
        WHERE table_name = 'external_supplier_data' 
          AND constraint_name = 'unique_ens_session'
    """))
    
    if result.fetchone():  # Constraint exists
        op.drop_constraint("unique_ens_session", "external_supplier_data", type_="unique")
    
    # Create the tables if necessary for the downgrade
    op.create_table(
        "matchbvdid",
        sa.Column("bvdid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("name_international", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("postcode", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("country", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("phone_or_fax", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("email_or_website", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("national_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("state", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("address_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("ens_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("ens_id", name="matchbvdid_pkey"),
    )
    
    op.create_table(
        "orgdata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("orgname", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("orgidentifier", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("bvdids", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="orgdata_pkey"),
        sa.UniqueConstraint("bvdids", name="orgdata_bvdids_key"),
        sa.UniqueConstraint("orgidentifier", name="orgdata_orgidentifier_key"),
    )
    # ### end Alembic commands ###